name: Infrastructure as Code Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - build-templates
        - deploy-k8s
        - deploy-windows
        - destroy-k8s
        - destroy-windows

env:
  TF_WORKING_DIR: terraform
  PACKER_TEMPLATES_DIR: packer/templates
  ANSIBLE_PLAYBOOK: ansible/playbooks/site.yml

jobs:
  validate:
    name: Validate IaC Code
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform 
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      with:
        version: latest
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install Ansible and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ansible ansible-lint yamllint jmespath netaddr requests
        
    - name: Validate Terraform
      run: |
        cd ${{ env.TF_WORKING_DIR }}
        terraform fmt -check
        terraform init -backend=false
        terraform validate
        
    - name: Validate Packer Templates
      run: |
        cd ${{ env.PACKER_TEMPLATES_DIR }}
        find . -name "*.json" -exec packer validate {} \;
        
    - name: Validate Ansible
      run: |
        cd ansible
        ansible-lint playbooks/ || true
        ansible-playbook --syntax-check ${{ env.ANSIBLE_PLAYBOOK }} -i inventory/hosts.yml

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request' || github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'plan')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: Terraform Plan - K8s Cluster
      env:
        TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
        TF_VAR_proxmox_user: ${{ secrets.PROXMOX_USERNAME }}
        TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
        TF_VAR_target_node: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.TF_WORKING_DIR }}/environments/k8s-cluster
        terraform init
        terraform plan -out=k8s-plan.tfplan
        
    - name: Terraform Plan - Windows Domain
      env:
        TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
        TF_VAR_proxmox_user: ${{ secrets.PROXMOX_USERNAME }}
        TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
        TF_VAR_target_node: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.TF_WORKING_DIR }}/environments/windows-domain
        terraform init
        terraform plan -out=windows-plan.tfplan
        
    - name: Upload Plans
      uses: actions/upload-artifact@v3
      with:
        name: terraform-plans
        path: |
          ${{ env.TF_WORKING_DIR }}/environments/k8s-cluster/k8s-plan.tfplan
          ${{ env.TF_WORKING_DIR }}/environments/windows-domain/windows-plan.tfplan
        retention-days: 7

  build-templates:
    name: Build Packer Templates
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'build-templates'
    
    strategy:
      matrix:
        template: [debian-12, ubuntu-22.04]
        # Note: Windows templates typically require more resources and time
        
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      with:
        version: latest
        
    - name: Build ${{ matrix.template }} Template
      env:
        PROXMOX_URL: ${{ secrets.PROXMOX_URL }}
        PROXMOX_USERNAME: ${{ secrets.PROXMOX_USERNAME }}
        PROXMOX_PASSWORD: ${{ secrets.PROXMOX_PASSWORD }}
        PROXMOX_NODE: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.PACKER_TEMPLATES_DIR }}/${{ matrix.template }}
        packer build \
          -var "proxmox_url=$PROXMOX_URL" \
          -var "proxmox_username=$PROXMOX_USERNAME" \
          -var "proxmox_password=$PROXMOX_PASSWORD" \
          -var "proxmox_node=$PROXMOX_NODE" \
          ${{ matrix.template == 'debian-12' && 'debian.json' || 'ubuntu.json' }}

  deploy-k8s:
    name: Deploy Kubernetes Cluster
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy-k8s'
    environment: 
      name: k8s-cluster
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: Download Plans
      uses: actions/download-artifact@v3
      with:
        name: terraform-plans
        path: terraform-plans/
        
    - name: Deploy K8s Cluster
      env:
        TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
        TF_VAR_proxmox_user: ${{ secrets.PROXMOX_USERNAME }}
        TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
        TF_VAR_target_node: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.TF_WORKING_DIR }}/environments/k8s-cluster
        terraform init
        terraform apply -auto-approve

  deploy-windows:
    name: Deploy Windows Domain
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'deploy-windows'
    environment: 
      name: windows-domain
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: Deploy Windows Domain
      env:
        TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
        TF_VAR_proxmox_user: ${{ secrets.PROXMOX_USERNAME }}
        TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
        TF_VAR_target_node: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.TF_WORKING_DIR }}/environments/windows-domain
        terraform init
        terraform apply -auto-approve

  configure-infrastructure:
    name: Configure with Ansible
    runs-on: ubuntu-latest
    needs: [deploy-k8s, deploy-windows]
    if: always() && (needs.deploy-k8s.result == 'success' || needs.deploy-windows.result == 'success')
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
        
    - name: Install Ansible
      run: |
        python -m pip install --upgrade pip
        pip install ansible jmespath netaddr requests
        
    - name: Run Ansible Playbooks
      run: |
        cd ansible
        ansible-galaxy install -r requirements.yml || true
        ansible-playbook -i inventory/hosts.yml playbooks/site.yml --diff

  destroy-k8s:
    name: Destroy Kubernetes Cluster
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy-k8s'
    environment: 
      name: k8s-cluster
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: Destroy K8s Cluster
      env:
        TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
        TF_VAR_proxmox_user: ${{ secrets.PROXMOX_USERNAME }}
        TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
        TF_VAR_target_node: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.TF_WORKING_DIR }}/environments/k8s-cluster
        terraform init
        terraform destroy -auto-approve

  destroy-windows:
    name: Destroy Windows Domain
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'destroy-windows'
    environment: 
      name: windows-domain
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: Destroy Windows Domain
      env:
        TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
        TF_VAR_proxmox_user: ${{ secrets.PROXMOX_USERNAME }}
        TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
        TF_VAR_target_node: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.TF_WORKING_DIR }}/environments/windows-domain
        terraform init
        terraform destroy -auto-approve

  drift-detection:
    name: Terraform Drift Detection
    runs-on: ubuntu-latest
    if: github.event.schedule
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: latest
        
    - name: Check for Drift - K8s
      env:
        TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
        TF_VAR_proxmox_user: ${{ secrets.PROXMOX_USERNAME }}
        TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
        TF_VAR_target_node: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.TF_WORKING_DIR }}/environments/k8s-cluster
        terraform init
        terraform plan -detailed-exitcode || echo "Drift detected in K8s cluster"
        
    - name: Check for Drift - Windows
      env:
        TF_VAR_proxmox_api_url: ${{ secrets.PROXMOX_API_URL }}
        TF_VAR_proxmox_user: ${{ secrets.PROXMOX_USERNAME }}
        TF_VAR_proxmox_password: ${{ secrets.PROXMOX_PASSWORD }}
        TF_VAR_target_node: ${{ secrets.PROXMOX_NODE }}
      run: |
        cd ${{ env.TF_WORKING_DIR }}/environments/windows-domain
        terraform init
        terraform plan -detailed-exitcode || echo "Drift detected in Windows domain"